import Head from "next/head";
import { useState } from "react";
import axios from "axios";
import Link from "next/link";
import { useEffect } from "react";
import { servDelete } from "@/services/servDelete";
import "bootstrap/dist/css/bootstrap.css";
import { Navbar, Container, Nav, Form } from "react-bootstrap";

export default function Home() {
  //declara a variavel para recever os registros retornados da api.
  const [data, setData] = useState([]);
  //declara a variavel para recever o numero de paginas
  const [page, setPage] = useState("");
  //declara a variavel para recever o numero da ultima pagina
  const [lastPage, setLastPage] = useState("");
  //declara a variavel para receber a mensagem
  const [message, setMessage] = useState("");

  //cria a função com requisiçao para api recuperar usuarios
  const getUsers = async (page) => {
    //verifica se o parametro é indefinido, caso seja, atribuir a pagina 1.
    if (page === undefined) {
      page = 1;
    }
    setPage(page);

    //realiza a requisição para api com axios para a rota listar usuarios.
    await axios
      .get("http://localhost:8080/users?page" + page)
      //acessa o then quando a api retornar status 200
      .then((response) => {
        //atribui os registros no state data
        console.log(response.data.users);
        setData(response.data.users);
        //atribui a ultima pagina
        setLastPage(response.data.pagination.lastPage);
      })
      //acessa  o catch quando a api retornar erro
      .catch((err) => {
        if (err.response) {
          //atribui a mensagem no state message

          setMessage(err.response.data.mensagem);
        } else {
          //atribui a mensagem no state message
          setMessage("Erro: tente mais tarde.");
        }
      });
  };

  //useEffect é usado para lidar com efeitos colaterais em um componente. por exemplo, o estado do componetente, fazer chamada a apis, manipular eventos entre outros.
  useEffect(() => {
    getUsers();
  }, []);

  const deleteUser = async (idUser) => {
    if (window.confirm("Tem certeza que deseja apagar?")) console.log(idUser);
    const response = await servDelete("http://localhost:8080/users/" + idUser);
    setMessage(response);
    getUsers(page);
  };

  return (
    <>
      <Head>
        <title>CRUD</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <div>
          <Navbar bg="dark" variant="dark">
            <Container>
              <Navbar.Toggle aria-controls="navbarScroll" />
              <Navbar.Collapse id="navbarScroll">
                <Nav
                  className="me-auto my-2 my-lg-0"
                  style={{ maxHeight: "100px" }}
                  navbarScroll
                >
                  <Nav.Link href={"/cadastrar"}>
                    <button className="btn btn-primary" type="button">
                      Cadastrar
                    </button>
                  </Nav.Link>
                </Nav>
              </Navbar.Collapse>
            </Container>
          </Navbar>
          <div>
            <Form className="d-flex align-items-center d-flex flex-wrap p-2 ">
              <h2>Listar Usuário</h2>
            </Form>
          </div>
          {message ? <p>{message}</p> : ""}
          {data.map((user) => (
            <div key={user.id}>
              <Form className="d-flex align-items-center d-flex flex-wrap p-2 ">
                <Form.Label className="border bg-#582900 mx-1">
                  ID: {user.id}
                </Form.Label>
                <br />
                <Form.Label className="border bg-#582900 mx-1">
                  Nome: {user.name}
                </Form.Label>
                <br />
                <Form.Label className="border bg-#582900 mx-1">
                  E-Mail: {user.email}
                </Form.Label>
                <br />
                <Form.Label className="border bg-#582900 mx-1">
                  Celular: {user.celular}
                </Form.Label>
                <br />
                <Form.Label className="border bg-#582900 mx-1">
                  Data de Nascimento: {user.nascimento}
                </Form.Label>
                <br />
                <Form.Label className="border bg-#582900 mx-1">
                  Endereço: {user.endereco}
                </Form.Label>
                <br />
                <Form.Label className="border bg-#582900 mx-1">
                  Sexo: {user.sexo}
                </Form.Label>
                <br />
              </Form>
              <Link href={`/visualizar/${user.id}`}>
                <button className="btn btn-outline-info" type="button">
                  Visualizar
                </button>
              </Link>{" "}
              <Link href={`/editar/${user.id}`}>
                <button className="btn btn-outline-success" type="button">
                  Editar
                </button>
              </Link>{" "}
              <button
                className="btn btn-outline-danger"
                type="button"
                onClick={() => deleteUser(user.id)}
              >
                Apagar
              </button>{" "}
              <hr />
            </div>
          ))}
          {page !== 1 ? (
            <button type="button" onClick={() => getUsers(1)}>
              Primeira
            </button>
          ) : (
            <button type="button" disabled>
              Primeira
            </button>
          )}{" "}
          {page !== 1 ? (
            <button type="button" onClick={() => getUsers(page - 1)}>
              {page - 1}
            </button>
          ) : (
            ""
          )}{" "}
          <button type="button" disabled>
            {page}
          </button>{" "}
          {page + 1 <= lastPage ? (
            <button type="button" onClick={() => getUsers(page + 1)}>
              {page + 1}
            </button>
          ) : (
            ""
          )}{" "}
          {page !== lastPage ? (
            <button type="button" onClick={() => getUsers(lastPage)}>
              Última
            </button>
          ) : (
            <button type="button" disabled>
              Última
            </button>
          )}{" "}
          <br />
          <br />
        </div>
      </main>
    </>
  );
}
